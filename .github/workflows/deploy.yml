name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - test/deployment  # Trigger on commit to the deployment branch
  pull_request:
    branches:
      - test/deployment  # Trigger on PR to the deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the correct directory
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # This checks out the code and places it in the correct folder
          path: springboot-app-prodwell

      # Step 2: Set up JDK (if your backend uses Java)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: Install Maven
      - name: Install Maven
        run: sudo apt-get install maven

      # Step 4: Build the application with Maven (this will generate the target/* files)
      - name: Build the application with Maven
        run: |
          cd springboot-app-prodwell  # Navigate to the backend code folder
          mvn clean package -DskipTests  # Builds the application and skips tests (optional)

      # Step 3: Check if AWS CLI is already installed, if not, install it
      - name: Install AWS CLI (if not installed)
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed"
          fi

      # Step 4: Set AWS Credentials from GitHub Secrets
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # Step 5: Create ZIP file of the backend code
      - name: Create ZIP of backend code
        run: |
          cd springboot-app-prodwell  # Navigate to the backend code folder
          zip -r prodwell-backend.zip springboot-app-prodwell/*

#      # Step 6: Upload ZIP to S3 bucket
#      - name: Upload to S3 bucket
#        run: |
#          aws s3 cp springboot-app-prodwell/prodwell-backend.zip s3://${{ secrets.S3_BUCKET_NAME }}/prodwell-backend.zip --no-progress
#
#      # Step 7: Create a new application version in Elastic Beanstalk
#      - name: Create Elastic Beanstalk application version
#        run: |
#          aws elasticbeanstalk create-application-version --application-name ${{ secrets.EB_APPLICATION_NAME }} --version-label prodwell-backend-$(date +%Y-%m-%d-%H-%M-%S) --s3-bucket ${{ secrets.S3_BUCKET_NAME }} --s3-key prodwell-backend.zip
#
#      # Step 8: Update Elastic Beanstalk environment with the new application version
#      - name: Update Elastic Beanstalk environment
#        run: |
#          aws elasticbeanstalk update-environment --application-name ${{ secrets.EB_APPLICATION_NAME }} --environment-name ${{ secrets.EB_ENVIRONMENT_NAME }} --version-label prodwell-backend-$(date +%Y-%m-%d-%H-%M-%S)
#
#      # Step 9: Clean up (optional, remove any downloaded files)
#      - name: Clean up
#        run: |
#          rm -f springboot-app-prodwell/prodwell-backend.zip
